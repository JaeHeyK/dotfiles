syntax on
colorscheme dim
set pastetoggle=<F9>
set incsearch
set hlsearch
set number relativenumber
set tabstop=8
set ttimeoutlen=1000
set cindent
set nosmartindent
set so=20
set cursorline
set backspace=indent,eol,start
set listchars=tab:>-,space:Â·
set whichwrap+=<,>,[,]
filetype on
filetype indent on

hi Visual			cterm=none      ctermfg=none    ctermbg=0
hi CursorLine   		term=none       cterm=none      ctermfg=None	ctermbg=0
hi LineNr       		                                ctermfg=15
hi CursorLineNr 		term=none	cterm=none	ctermfg=3
hi CursorColumn			cterm=none	ctermbg=15
hi MatchParen   		cterm=none	ctermbg=Blue	ctermfg=Black
hi Comment      		term=none	cterm=none	ctermfg=15
hi DiffAdd      		cterm=none	ctermfg=Black	ctermbg=Green
hi DiffChange   		cterm=none	ctermfg=None	ctermbg=None
hi DiffDelete   		cterm=bold	ctermfg=Black	ctermbg=Red
hi DiffText     		cterm=none	ctermfg=Black	ctermbg=Yellow
hi Error                        		ctermfg=7
hi ErrorMsg                     		ctermfg=7
hi LspWarningHighlight		cterm=reverse	ctermfg=11	ctermbg=0
hi NonText					ctermfg=0	guifg=gray
hi SpecialKey					ctermfg=0	guifg=gray
hi Todo				term=reverse	cterm=reverse	ctermfg=11	ctermbg=0
"hi lspReference			cterm=reverse	ctermfg=15
"hi SpellBad                    ctermfg=Black
"hi SpellRare                   ctermfg=Black
"hi SpellLocal                  ctermfg=Black
"hi StatusLineTerm              ctermfg=Black
hi Pmenu                        ctermfg=None      ctermbg=0
hi PmenuSel                     ctermfg=0       ctermbg=7

"inoremap " ""<left>
"inoremap ' ''<left>
"inoremap ( ()<left>
"inoremap [ []<left>
"inoremap { {}<left>
"inoremap {<CR> {<CR>}<ESC>O
"inoremap (<CR> (<CR>)<ESC>O
"inoremap [<CR> [<CR>]<ESC>O
xnoremap p pgvy
nnoremap <F3> :noh<CR>
noremap <Leader><F3> :set list!<CR>
noremap <Leader>g 1<C-g>
noremap <F4> :Vista!!<CR>
nnoremap <F5> <C-w>=
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <F7> :set rnu!<CR>
noremap <F8> :set nu!<CR>
noremap <Leader><F7> :set nonu \| set nornu  \| set scl=no \| set nolist <CR> 
noremap <Leader><F8> :set nu \| set rnu \| set scl=yes \| set list <CR>

augroup vimrcQfClose
    autocmd!
    autocmd FileType qf if mapcheck('<esc>', 'n') ==# '' | nnoremap <buffer><silent> <esc> :cclose<bar>lclose<CR> | endif
augroup END

"=== vim-plug settings =================
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin()
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'liuchengxu/vista.vim'
Plug 'tsufeki/asyncomplete-fuzzy-match', {
    \ 'do': 'cargo build --release',
    \ }
Plug 'habamax/vim-rst'
Plug 'kergoth/vim-bitbake'
Plug 'zivyangll/git-blame.vim'
Plug 'tpope/vim-fugitive'
Plug 'jiangmiao/auto-pairs'
call plug#end()

"=== LSP settings =======================
nnoremap <F2> :LspRename<cr>
nnoremap <F9> :LspHover<cr>
nnoremap <F10> :LspReferences<cr>
nnoremap <F12> :LspDefinition<cr>
nnoremap <Leader><F12> :LspPeekDefinition<cr>
nnoremap <buffer> <expr><S-j> lsp#scroll(+4)
nnoremap <buffer> <expr><S-k> lsp#scroll(-4)
let g:lsp_preview_float = 1
let g:lsp_diagnostics_highlights_enabled = 1
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_diagnostics_echo_cursor = 1
set signcolumn=yes

"=== autocomplete settings ======================
imap <c-.> <Plug>(asyncomplete_force_refresh)
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
let g:lsp_async_completion = 1
let g:asyncomplete_smart_completion = 1

"=== Vista.vim(symbol list) setting =============
let g:vista_default_executive = 'vim_lsp'
let g:vista_sidebar_width = '36'
let g:vista_sidebar_position = "vertical topleft"
let g:vista_cursor_delay = 0
let g:vista_echo_cursor_strategy = 'scroll'
let g:vista_stay_on_open = 1
let g:vista_close_on_jump = 1
"let g:vista_log_file = expand('~/vista.log')

"=== git_blame.vim setting ======================
nnoremap <Leader>s :<C-u>call gitblame#echo()<CR>

"== tmux settings =====================
autocmd BufReadPost,FileReadPost,BufNewFile,BufEnter * call system("tmux rename-window " . expand("%:t"))
autocmd VimLeave * call system("tmux setw automatic-rename")
